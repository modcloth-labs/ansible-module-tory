#!/usr/bin/env python
# vim:fileencoding=utf-8

import httplib
import json
import re
import urlparse

from ansible.module_utils.basic import *  # noqa

DOCUMENTATION = """
---
module: tory_add_host
description:
- register a given host in tory
short_description: register a given host in tory
options:
  hostname:
    description:
    - name of the host to register
    required: true
    default: null
  ip:
    description:
    - ip address of the host to register
    required: true
    default: null
  auth_token:
    description:
    - tory server auth token (may be given as $TORY_AUTH_TOKEN)
    required: false
    default: swordfish
  tory_server:
    description:
    - tory server host and path (may be given as $TORY_SERVER)
    required: false
    default: 'http://localhost:9462/ansible/hosts'
"""
EXAMPLES = """
---
- name: register this host in tory
  delegate_to: 127.0.0.1
  sudo: false
  tory_add_host:
    hostname={{ ansible_fqdn }}
    ip={{ ansible_default_ipv4.address }}
    tag_team=hosers
    tag_env={{ env }}
    tag_role={{ primary_role }}
    var_whatever={{ something_from_somewhere }}
    var_this_playbook="{{ user }} {{ ansible_date_time.iso8601 }}"
    var_special=true
"""

HOSTNAME_RE = re.compile(
    "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*" +
    "[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$"
)
IPADDR_RE = re.compile("^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}$")


def main():
    module = ToryAddHostModule(
        argument_spec=dict(
            hostname=dict(required=True),
            ip=dict(required=True),
            auth_token=dict(
                required=False, default=os.environ.get(
                    'TORY_AUTH_TOKEN', 'swordfish'
                )
            ),
            tory_server=dict(
                required=False, default=os.environ.get(
                    'TORY_SERVER', 'http://localhost:9462/ansible/hosts'
                )
            ),
        ),
        supports_check_mode=True,
    )

    params = module.params
    if 'hostname' not in params or \
            HOSTNAME_RE.match(params['hostname']) is None:
        module.fail_json(msg='invalid hostname')

    if 'ip' not in params or IPADDR_RE.match(params['ip']) is None:
        module.fail_json(msg='invalid ip address')

    if 'auth_token' not in params:
        module.fail_json(msg='no auth_token provided')

    tory_server = params.get('tory_server', os.environ.get('TORY_SERVER'))
    url = urlparse.urlparse(tory_server)

    if not tory_server:
        module.fail_json(
            msg='no tory server provided in env (as $TORY_SERVER) or '
            'module args (as "tory_server")'
        )

    data = {
        'name': params['hostname'],
        'ip': params['ip'],
        'tags': {},
        'vars': {}
    }

    for key, value in params.iteritems():
        if key.startswith('tag_'):
            data['tags'][key.replace('tag_', '')] = value
        if key.startswith('var_'):
            data['vars'][key.replace('var_', '')] = value

    conn = httplib.HTTPConnection(
        url.netloc.split(':')[0], int(url.port or 80)
    )
    conn.request(
        'PUT', '{}/{}'.format(url.path, params['hostname']),
        json.dumps({'host': data}),
        {
            'Content-Type': 'application/json',
            'Authorization': 'token {}'.format(params['auth_token'])
        }
    )
    resp = conn.getresponse()

    data['changed'] = True
    if resp.status not in (201, 200):
        module.fail_json(msg='failed to register host')

    print json.dumps(data)
    return 0


class ToryAddHostModule(AnsibleModule):

    def _check_invalid_arguments(self):
        pass


main()
